# For dev
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${APP_NAME}-file-manager
  description: Deployment template for the JAG-csrs filemanager

labels:
  app: ${APP_NAME}-file-manager
  app.kubernetes.io/name: ${APP_NAME}-file-manager
  app.kubernetes.io/part-of: ${APP_NAME}

# First Iteration : Other Appropriate Parameters like API GW end point for SharePoint etc. 
# would be gradually added. 
parameters:

- name: APP_NAME
  description: The application name that each component is part of
  required: true
  value: jag-csrs

- name: SPLUNK_CONFIG_NAME
  description: Source of Splunk config values
  required: true
  value: blahblah

- name: FILEMANAGER_CONFIG_NAME
  description: Source of FILE MANAGER config values
  required: true
  value: blahblah

- name: OAUTH_CONFIG_NAME
  description: Source of Dynamics and Sharepoint config values
  required: true
  value: blahblah
- name: ROUTE_PREFIX
  description: The application name that each component is part of
  required: true
  value: jag-csrs-file-manager

- name: FILEMANAGER_COMPONENT_NAME
  description: File Manager component name
  required: true
  value: jag-csrs-file-manager
  
- name: OC_NAMESPACE
  description: The OpenShift namespace prefix
  required: true
  value: blahblah
  
- name: OC_ENV
  description: The OpenShift environment, ie dev, test or prod
  required: true
  value: dev

- name: DNS
  description: The application name that each component is part of
  required: false
  value: apps.silver.devops.gov.bc.ca

- name: FILE_MANAGER_ROUTE
  description: File Manager Route Name
  required: true
  value: blahblah


- name: OPENSHIFT
  description: Indicator of the build is for OpenShift not local
  required: false
  value: nonlocal
- name: SSL_CERT_DIR
  description: CA CERT Location
  required: true
  value: /opt/app-root/ssl_dir/blahblah
- name: ASPNETCORE_ENVIRONMENT
  description: Environemnt indicator for DOTNET like DEvelopment, Production etc.
  required: false
  value: Production

- name: RESOURCE
  description: sharepoint location
  required: true
  value: sharepoint_blah_blah_location
- name: CA_MOUNT_PATH
  description: ca mount path
  required: true
  value: CA_MOUNT_PATH_blah_blah
- name: SERVICE_TRUST_BUNDLE_MOUNT_PATH
  description: ca mount path
  required: true
  value: SERVICE_TRUST_BUNDLE_MOUNT_PATH blah blah

- name: SIGNER
  description: signer for self signed cert
  required: true
  value: openshift-service-serving-signer@blahblah

- name: FILE_MANAGER_SERVICE_CERT
  description: where filemanager tls cert and keys are mounted
  required: true
  value: /var/run/secrets/blahblah

- name: FILEMANAGER_CONFIG_NAME
  description: name of file manager config
  required: true
  value: blahblah

objects:

### JAG-csrs FILEMANAGER Deployment Config ###
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: ${FILEMANAGER_COMPONENT_NAME}
    namespace: ${OC_NAMESPACE}-${OC_ENV}
      
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${FILEMANAGER_COMPONENT_NAME}
    strategy:
      type: Rolling
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          name: ${FILEMANAGER_COMPONENT_NAME}
          app.kubernetes.io/instance: ${FILEMANAGER_COMPONENT_NAME}
          app.openshift.io/runtime: dotnet
          version: vblahblah
      spec:
        containers:
          # due to permission issue (originally; that got resolved later but retroactive  adjustment did not happen) 
          # not using tools space; dev is pulling from dev
          - image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-${OC_ENV}/${FILEMANAGER_COMPONENT_NAME}:${OC_ENV}
            name: ${FILEMANAGER_COMPONENT_NAME} 
            imagePullPolicy: Always
            ports:
              - containerPort: 8080
              - containerPort: 8088
            env:
            - name: SPLUNK_COLLECTOR_URL
              valueFrom:
                secretKeyRef:
                  name: ${SPLUNK_CONFIG_NAME}
                  key: SPLUNK_URL
            - name: FILEMANAGER_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: ${FILEMANAGER_CONFIG_NAME}
                  key: FILEMANAGER_ADDRESS
            - name: FILEMANAGER_SECURE
              valueFrom:
                secretKeyRef:
                  name: ${FILEMANAGER_CONFIG_NAME}
                  key: FILEMANAGER_SECURE
            - name: SPLUNK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ${SPLUNK_CONFIG_NAME}
                  key: SPLUNK_TOKEN
            - name: SPLUNK_INDEX
              valueFrom:
                secretKeyRef:
                  name: ${SPLUNK_CONFIG_NAME}
                  key: SPLUNK_INDEX
            - name: AUTHORIZATION_URI
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: AUTHORIZATION_URI
            - name: SHAREPOINT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: SHAREPOINT_PASSWORD
            - name: SHAREPOINT_USERNAME
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: SHAREPOINT_USERNAME
            - name: RELYING_PARTY_IDENTIFIER
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: SHAREPOINT_RELYING_PARTY_IDENTIFIER
            - name: APIGATEWAY_HOST
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: APIGATEWAY_HOST
            - name: APIGATEWAY_POLICY
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: APIGATEWAY_POLICY
            - name: RESOURCE
              valueFrom:
                secretKeyRef:
                  name:  ${FILEMANAGER_CONFIG_NAME}
                  key: RESOURCE
            - name: OPENSHIFT
              value: ${OPENSHIFT}
            - name: SSL_CERT_DIR
              value: ${SSL_CERT_DIR}
            - name: ASPNETCORE_ENVIRONMENT
              value: ${ASPNETCORE_ENVIRONMENT}
            # Yet to deal with proper resource allocation
            resources:
              limits:
                cpu: 500m
                memory: 1000Mi
              requests:
                cpu: 250m
                memory: 512Mi
            volumeMounts:
              - name: service-cert
                mountPath: ${FILE_MANAGER_SERVICE_CERT}
              - name: csrs-file-manager-ca
                mountPath: ${CA_MOUNT_PATH}
                subPath: service-ca.crt

            # Took away readiness and liveness probe until those end points are ready
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${FILEMANAGER_COMPONENT_NAME}
          from:
            kind: ImageStreamTag
            namespace: ${OC_NAMESPACE}-${OC_ENV} #do not have permission to leverage tools
            name: ${FILEMANAGER_COMPONENT_NAME}:${OC_ENV}
  status: {}


- apiVersion: v1
    kind: Service

    metadata:
      name: ${FILEMANAGER_COMPONENT_NAME}
      namespace: ${OC_NAMESPACE}-${OC_ENV}
      annotations:
        description: File Manager cert generation (automatic)
        service.alpha.openshift.io/serving-cert-secret-name: file-manager-service-cert
        service.alpha.openshift.io/serving-cert-signed-by: ${SIGNER}
        service.beta.openshift.io/serving-cert-signed-by: ${SIGNER}
    labels:
      app: jag-csrs-file-manager
      app.kubernetes.io/component: backend
      app.kubernetes.io/instance: jag-csrs-file-manager
      app.kubernetes.io/name: jag-csrs-file-manager
      app.kubernetes.io/part-of: jag-csrs
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
        - name: 8088-tcp
          protocol: TCP
          port: 8088
          targetPort: 8088
      selector:
        name: jag-csrs-file-manager
      clusterIP: None
      sessionAffinity: None

- apiVersion: route.openshift.io/v1
  kind: Route

  metadata:
    name: ${FILEMANAGER_COMPONENT_NAME}
    namespace: ${OC_NAMESPACE}-${OC_ENV}
    labels:
      app: jag-csrs-file-manager
      app.kubernetes.io/name: jag-csrs-file-manager
      app.kubernetes.io/part-of: jag-csrs
  spec:
    host: ${FILEMANAGER_COMPONENT_NAME}-${OC_ENV}
    to:
      kind: Service
      name: jag-csrs-file-manager
      weight: 100
    port:
      targetPort: 8080-tcp
    tls:
      termination: passthrough
    wildcardPolicy: None
