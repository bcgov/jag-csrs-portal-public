# This is the workflow that creates a new image for CSRS front end
# Credit goes to Suganth /his CDDS and SCSS templates

name: Main - Build Image and Push to Openshift Registry for non DEV Deployment

# Controls when the workflow will run
on:
  # Trigger the this workflow on tagging
  # https://github.community/t/how-to-run-github-actions-workflow-only-for-new-tags/16075/23
  push:
    tags:
      - '*'
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        app:
            description: 'App Name (jag-csrs)'    
            required: true
            default: jag-csrs
        #env:
        #    description: 'Image Target Env'     
        #    required: true
        #    default: 'dev'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    environment: ${{ github.event.inputs.env }}
    env:
      app: ${{github.event.inputs.app}}
      #env: ${{github.event.inputs.env}}
      app_from_gh_secret: ${{ secrets.APP_NAME }}
      #env_from_gh_secret: ${{secrets.OPENSHIFT_ENV_TAG}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git Checkout
        uses: actions/checkout@v2
      
      # Get Git latest short Sha# from the release branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get git tag
        id: tag
        run: |
          tag=$(echo $(git tag --points-at HEAD))
          echo "gittag=$tag" >> $GITHUB_ENV
      
      - name: env variables

        run: |

          if [[ -z "$app" ]]; then
            echo "app=$app_from_gh_secret" >> $GITHUB_ENV
          fi  
          
      - name: print env variables

        run: |

          echo "Release Application: ${{ env.app }}"
          echo "Release Git Sha: ${{env.gittag}}"
          
       #Login to OpenShift Container Repository
      - name: Login to OpenShift Container Repository
        uses: docker/login-action@v1
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_BUILDER_SA_USERNAME_TOOLs}}
          password: ${{secrets.OPENSHIFT_BUILDER_SA_PASSWORD_TOOLS}}


      #Build and push image to OpenShift Image stream
      - name: Build & Push frontend Image to Openshift Image Stream
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./src/frontend/csrs-portal
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_LICENSE_PLATE}}-tools/${{env.app}}-frontend:${{env.gittag}}
        run: |
          docker build \
            --tag ${IMAGE} \
            ${CONTEXT}
            docker push ${IMAGE} 
      - name: Build & Push API Image to Openshift Image Stream
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./src/backend
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_LICENSE_PLATE}}-tools/${{env.app}}-api:${{env.gittag}}
        run: |
          docker build \
            --tag ${IMAGE} \
            ${CONTEXT}
            docker push ${IMAGE}
      - name: Build & Push File Manager Image to Openshift Image Stream
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./src/backend/
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_LICENSE_PLATE}}-tools/${{env.app}}-file-manager:${{env.gittag}}
        run: |
          docker build -f ./src/backend/Csrs.Services.FileManager/Dockerfile.rhel8 \
            --tag ${IMAGE} \
            ${CONTEXT}
            docker push ${IMAGE}             
      # Would uncomment when we are able to execute patch on dc     
      # Login to Openshift using OC SA and Token of respective env.
      #- name: Authenticate OC Env Specific SA
      #  uses: redhat-actions/oc-login@v1
      #  env:
      #    OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ env.env }}
      #    #OPENSHIFT_USER: ${{secrets.OPENSHIFT_DEPLOYER_SA_USERNAME}}
      #    OPENSHIFT_USER: ${{secrets.OPENSHIFT_DEFAULT_SA_USERNAME}}
      #  with:
      #    openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
      #    #openshift_token: ${{secrets.OPENSHIFT_DEPLOYER_SA_PASSWORD}}
      #    openshift_token: ${{secrets.OPENSHIFT_DEFAULT_SA_TOKEN}}
      #    namespace: ${OPENSHIFT_NAMESPACE}
      
      # The steps below would not work until some additional role binding work is done
      # On corresponding namesapce. However at present none of us has that privilege.
      # Versions the deployment config of the application with release version number - 
      # This change will trigger a deployment 
      #- name: Labelling DC to release version
      #  env:
      #    appName: ${{ env.app }}
      #    openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ env.env }}
      #  run: |
      #    oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.gitsha }}"}}}}}'
